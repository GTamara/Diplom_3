{"name": "Клик по ссылке \"Конструктор\" ведет на страницу оформления заказа", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6F4AF1502+60802]\n\t(No symbol) [0x00007FF6F4A6AC02]\n\t(No symbol) [0x00007FF6F4927CE4]\n\t(No symbol) [0x00007FF6F495F30A]\n\t(No symbol) [0x00007FF6F495AA64]\n\t(No symbol) [0x00007FF6F49A6037]\n\t(No symbol) [0x00007FF6F49A56B0]\n\t(No symbol) [0x00007FF6F499A923]\n\t(No symbol) [0x00007FF6F4968FEC]\n\t(No symbol) [0x00007FF6F4969C21]\n\tGetHandleVerifier [0x00007FF6F4DF411D+3217821]\n\tGetHandleVerifier [0x00007FF6F4E360B7+3488055]\n\tGetHandleVerifier [0x00007FF6F4E2F03F+3459263]\n\tGetHandleVerifier [0x00007FF6F4BAB846+823494]\n\t(No symbol) [0x00007FF6F4A75F9F]\n\t(No symbol) [0x00007FF6F4A70EC4]\n\t(No symbol) [0x00007FF6F4A71052]\n\t(No symbol) [0x00007FF6F4A618A4]\n\tBaseThreadInitThunk [0x00007FFB4C297344+20]\n\tRtlUserThreadStart [0x00007FFB4D8226B1+33]", "trace": "request = <SubRequest 'driver' for <Function test_click_header_constructor_link_directs_to_constructor_page[chrome_driver]>>\n\n    @pytest.fixture(\n        scope=\"function\",\n        params=[\n            'firefox_driver',\n            'chrome_driver',\n        ]\n    )\n    def driver(request):\n>       return request.getfixturevalue(request.param)\n\nconftest.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nconftest.py:28: in chrome_driver\n    driver = webdriver.Chrome(options=options)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\nvenv\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B59A5B4380>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...07FF6F4A618A4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB4C297344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFB4D8226B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6F4AF1502+60802]\nE       \t(No symbol) [0x00007FF6F4A6AC02]\nE       \t(No symbol) [0x00007FF6F4927CE4]\nE       \t(No symbol) [0x00007FF6F495F30A]\nE       \t(No symbol) [0x00007FF6F495AA64]\nE       \t(No symbol) [0x00007FF6F49A6037]\nE       \t(No symbol) [0x00007FF6F49A56B0]\nE       \t(No symbol) [0x00007FF6F499A923]\nE       \t(No symbol) [0x00007FF6F4968FEC]\nE       \t(No symbol) [0x00007FF6F4969C21]\nE       \tGetHandleVerifier [0x00007FF6F4DF411D+3217821]\nE       \tGetHandleVerifier [0x00007FF6F4E360B7+3488055]\nE       \tGetHandleVerifier [0x00007FF6F4E2F03F+3459263]\nE       \tGetHandleVerifier [0x00007FF6F4BAB846+823494]\nE       \t(No symbol) [0x00007FF6F4A75F9F]\nE       \t(No symbol) [0x00007FF6F4A70EC4]\nE       \t(No symbol) [0x00007FF6F4A71052]\nE       \t(No symbol) [0x00007FF6F4A618A4]\nE       \tBaseThreadInitThunk [0x00007FFB4C297344+20]\nE       \tRtlUserThreadStart [0x00007FFB4D8226B1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "parameters": [{"name": "driver", "value": "'chrome_driver'"}], "start": 1715329762275, "stop": 1715329762275, "uuid": "86947ce6-1d3e-4e91-a1c4-c2caa2fffe08", "historyId": "5543b28d04ce25c7e66daaa2a581d35e", "testCaseId": "655fdf907f5148ec9d3a5f05c23c8e16", "fullName": "tests.orders.test_constructor.TestConstructorPage#test_click_header_constructor_link_directs_to_constructor_page", "labels": [{"name": "parentSuite", "value": "tests.orders"}, {"name": "suite", "value": "test_constructor"}, {"name": "subSuite", "value": "TestConstructorPage"}, {"name": "host", "value": "DESKTOP-HCED1QB"}, {"name": "thread", "value": "38848-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.orders.test_constructor"}]}